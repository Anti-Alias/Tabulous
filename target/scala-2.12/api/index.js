Index.PACKAGES = {"tabulous" : [{"name" : "tabulous.AnyExtended", "shortDescription" : "Implicit class used to make casting easier.", "members_class" : [{"label" : "asByte", "tail" : "(): Byte", "member" : "tabulous.AnyExtended.asByte", "link" : "tabulous\/package$$AnyExtended.html#asByte:Byte", "kind" : "def"}, {"label" : "asLong", "tail" : "(): Long", "member" : "tabulous.AnyExtended.asLong", "link" : "tabulous\/package$$AnyExtended.html#asLong:Long", "kind" : "def"}, {"label" : "asShort", "tail" : "(): Short", "member" : "tabulous.AnyExtended.asShort", "link" : "tabulous\/package$$AnyExtended.html#asShort:Short", "kind" : "def"}, {"label" : "asBoolean", "tail" : "(): Boolean", "member" : "tabulous.AnyExtended.asBoolean", "link" : "tabulous\/package$$AnyExtended.html#asBoolean:Boolean", "kind" : "def"}, {"label" : "asFloat", "tail" : "(): Float", "member" : "tabulous.AnyExtended.asFloat", "link" : "tabulous\/package$$AnyExtended.html#asFloat:Float", "kind" : "def"}, {"label" : "asChar", "tail" : "(): Char", "member" : "tabulous.AnyExtended.asChar", "link" : "tabulous\/package$$AnyExtended.html#asChar:Char", "kind" : "def"}, {"label" : "asString", "tail" : "(): String", "member" : "tabulous.AnyExtended.asString", "link" : "tabulous\/package$$AnyExtended.html#asString:String", "kind" : "def"}, {"label" : "asInt", "tail" : "(): Int", "member" : "tabulous.AnyExtended.asInt", "link" : "tabulous\/package$$AnyExtended.html#asInt:Int", "kind" : "def"}, {"label" : "asDouble", "tail" : "(): Double", "member" : "tabulous.AnyExtended.asDouble", "link" : "tabulous\/package$$AnyExtended.html#asDouble:Double", "kind" : "def"}, {"label" : "as", "tail" : "(): T", "member" : "tabulous.AnyExtended.as", "link" : "tabulous\/package$$AnyExtended.html#as[T]:T", "kind" : "def"}, {"label" : "parseLong", "tail" : "(): Long", "member" : "tabulous.AnyExtended.parseLong", "link" : "tabulous\/package$$AnyExtended.html#parseLong:Long", "kind" : "def"}, {"label" : "parseBoolean", "tail" : "(): Boolean", "member" : "tabulous.AnyExtended.parseBoolean", "link" : "tabulous\/package$$AnyExtended.html#parseBoolean:Boolean", "kind" : "def"}, {"label" : "parseShort", "tail" : "(): Short", "member" : "tabulous.AnyExtended.parseShort", "link" : "tabulous\/package$$AnyExtended.html#parseShort:Short", "kind" : "def"}, {"label" : "parseFloat", "tail" : "(): Float", "member" : "tabulous.AnyExtended.parseFloat", "link" : "tabulous\/package$$AnyExtended.html#parseFloat:Float", "kind" : "def"}, {"label" : "parseByte", "tail" : "(): Byte", "member" : "tabulous.AnyExtended.parseByte", "link" : "tabulous\/package$$AnyExtended.html#parseByte:Byte", "kind" : "def"}, {"label" : "parseChar", "tail" : "(): Char", "member" : "tabulous.AnyExtended.parseChar", "link" : "tabulous\/package$$AnyExtended.html#parseChar:Char", "kind" : "def"}, {"label" : "parseInt", "tail" : "(): Int", "member" : "tabulous.AnyExtended.parseInt", "link" : "tabulous\/package$$AnyExtended.html#parseInt:Int", "kind" : "def"}, {"label" : "parseDouble", "tail" : "(): Double", "member" : "tabulous.AnyExtended.parseDouble", "link" : "tabulous\/package$$AnyExtended.html#parseDouble:Double", "kind" : "def"}, {"member" : "tabulous.AnyExtended#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tabulous\/package$$AnyExtended.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tabulous\/package$$AnyExtended.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tabulous\/package$$AnyExtended.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tabulous\/package$$AnyExtended.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tabulous\/package$$AnyExtended.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tabulous\/package$$AnyExtended.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tabulous\/package$$AnyExtended.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/package$$AnyExtended.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/package$$AnyExtended.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/package$$AnyExtended.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tabulous\/package$$AnyExtended.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tabulous\/package$$AnyExtended.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tabulous\/package$$AnyExtended.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tabulous\/package$$AnyExtended.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "tabulous\/package$$AnyExtended.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tabulous\/package$$AnyExtended.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "tabulous\/package$$AnyExtended.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tabulous\/package$$AnyExtended.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tabulous\/package$$AnyExtended.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tabulous\/package$$AnyExtended.html", "kind" : "class"}, {"name" : "tabulous.InvalidColumnNameException", "shortDescription" : "", "members_case class" : [{"member" : "tabulous.InvalidColumnNameException#<init>", "error" : "unsupported entity"}, {"label" : "column", "tail" : ": String", "member" : "tabulous.InvalidColumnNameException.column", "link" : "tabulous\/InvalidColumnNameException.html#column:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "tabulous\/InvalidColumnNameException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "tabulous\/InvalidColumnNameException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "tabulous\/InvalidColumnNameException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "tabulous\/InvalidColumnNameException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "tabulous\/InvalidColumnNameException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "tabulous\/InvalidColumnNameException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "tabulous\/InvalidColumnNameException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "tabulous\/InvalidColumnNameException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "tabulous\/InvalidColumnNameException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "tabulous\/InvalidColumnNameException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "tabulous\/InvalidColumnNameException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "tabulous\/InvalidColumnNameException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "tabulous\/InvalidColumnNameException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tabulous\/InvalidColumnNameException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tabulous\/InvalidColumnNameException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tabulous\/InvalidColumnNameException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tabulous\/InvalidColumnNameException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tabulous\/InvalidColumnNameException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tabulous\/InvalidColumnNameException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tabulous\/InvalidColumnNameException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/InvalidColumnNameException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/InvalidColumnNameException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/InvalidColumnNameException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tabulous\/InvalidColumnNameException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tabulous\/InvalidColumnNameException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tabulous\/InvalidColumnNameException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "tabulous\/InvalidColumnNameException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tabulous\/InvalidColumnNameException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tabulous\/InvalidColumnNameException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tabulous\/InvalidColumnNameException.html", "kind" : "case class"}, {"name" : "tabulous.Row", "members_trait" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "tabulous\/Row.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "toString", "tail" : "(): String", "member" : "tabulous.Row.toString", "link" : "tabulous\/Row.html#toString():String", "kind" : "def"}, {"label" : "toString", "tail" : "(colWidth: Int): String", "member" : "tabulous.Row.toString", "link" : "tabulous\/Row.html#toString(colWidth:Int):String", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Any) ⇒ U): Unit", "member" : "tabulous.Row.foreach", "link" : "tabulous\/Row.html#foreach[U](f:Any=>U):Unit", "kind" : "def"}, {"label" : "numColumns", "tail" : "(): Int", "member" : "tabulous.Row.numColumns", "link" : "tabulous\/Row.html#numColumns:Int", "kind" : "def"}, {"label" : "apply", "tail" : "(columnName: String): Any", "member" : "tabulous.Row.apply", "link" : "tabulous\/Row.html#apply(columnName:String):Any", "kind" : "def"}, {"label" : "dataArray", "tail" : "(): Array[Any]", "member" : "tabulous.Row.dataArray", "link" : "tabulous\/Row.html#dataArray:Array[Any]", "kind" : "def"}, {"label" : "seq", "tail" : "(): Traversable[Any]", "member" : "scala.collection.Traversable.seq", "link" : "tabulous\/Row.html#seq:Traversable[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Traversable]", "member" : "scala.collection.Traversable.companion", "link" : "tabulous\/Row.html#companion:scala.collection.generic.GenericCompanion[Traversable]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Any) ⇒ GenTraversableOnce[B]): Traversable[Traversable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "tabulous\/Row.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Any) ⇒ GenTraversableOnce[B]): Traversable[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "tabulous\/Row.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Any) ⇒ (A1, A2, A3)): (Traversable[A1], Traversable[A2], Traversable[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "tabulous\/Row.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Any) ⇒ (A1, A2)): (Traversable[A1], Traversable[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "tabulous\/Row.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Traversable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "tabulous\/Row.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[Any, Traversable[Any]]", "member" : "scala.collection.generic.GenericTraversableTemplate.newBuilder", "link" : "tabulous\/Row.html#newBuilder:scala.collection.mutable.Builder[A,CC[A]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Any) ⇒ Boolean): FilterMonadic[Any, Traversable[Any]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "tabulous\/Row.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): TraversableView[Any, Traversable[Any]]", "member" : "scala.collection.TraversableLike.view", "link" : "tabulous\/Row.html#view(from:Int,until:Int):scala.collection.TraversableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): TraversableView[Any, Traversable[Any]]", "member" : "scala.collection.TraversableLike.view", "link" : "tabulous\/Row.html#view:scala.collection.TraversableView[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "tabulous\/Row.html#stringPrefix:String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Any, Col[Any]]): Col[Any]", "member" : "scala.collection.TraversableLike.to", "link" : "tabulous\/Row.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Any]", "member" : "scala.collection.TraversableLike.toStream", "link" : "tabulous\/Row.html#toStream:Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Any]", "member" : "scala.collection.TraversableLike.toIterator", "link" : "tabulous\/Row.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Any]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "tabulous\/Row.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.TraversableLike.copyToArray", "link" : "tabulous\/Row.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Traversable[Any]]", "member" : "scala.collection.TraversableLike.inits", "link" : "tabulous\/Row.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Traversable[Any]]", "member" : "scala.collection.TraversableLike.tails", "link" : "tabulous\/Row.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Traversable[Any], Traversable[Any])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "tabulous\/Row.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Any) ⇒ Boolean): (Traversable[Any], Traversable[Any])", "member" : "scala.collection.TraversableLike.span", "link" : "tabulous\/Row.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Any) ⇒ Boolean): Traversable[Any]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "tabulous\/Row.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Any) ⇒ Boolean): Traversable[Any]", "member" : "scala.collection.TraversableLike.takeWhile", "link" : "tabulous\/Row.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Traversable[Any]", "member" : "scala.collection.TraversableLike.slice", "link" : "tabulous\/Row.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Traversable[Any]", "member" : "scala.collection.TraversableLike.drop", "link" : "tabulous\/Row.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Traversable[Any]", "member" : "scala.collection.TraversableLike.take", "link" : "tabulous\/Row.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Traversable[Any]", "member" : "scala.collection.TraversableLike.init", "link" : "tabulous\/Row.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Any]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "tabulous\/Row.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Any", "member" : "scala.collection.TraversableLike.last", "link" : "tabulous\/Row.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): Traversable[Any]", "member" : "scala.collection.TraversableLike.tail", "link" : "tabulous\/Row.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Any]", "member" : "scala.collection.TraversableLike.headOption", "link" : "tabulous\/Row.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Any", "member" : "scala.collection.TraversableLike.head", "link" : "tabulous\/Row.html#head:A", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Any, B) ⇒ B)(bf: CanBuildFrom[Traversable[Any], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "tabulous\/Row.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Any) ⇒ B)(bf: CanBuildFrom[Traversable[Any], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "tabulous\/Row.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Traversable[Any], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "tabulous\/Row.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Any) ⇒ Boolean): Option[Any]", "member" : "scala.collection.TraversableLike.find", "link" : "tabulous\/Row.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Any) ⇒ Boolean): Boolean", "member" : "scala.collection.TraversableLike.exists", "link" : "tabulous\/Row.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Any) ⇒ Boolean): Boolean", "member" : "scala.collection.TraversableLike.forall", "link" : "tabulous\/Row.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Any) ⇒ K): Map[K, Traversable[Any]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "tabulous\/Row.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Any) ⇒ Boolean): (Traversable[Any], Traversable[Any])", "member" : "scala.collection.TraversableLike.partition", "link" : "tabulous\/Row.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Any, B])(bf: CanBuildFrom[Traversable[Any], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "tabulous\/Row.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Any) ⇒ Boolean): Traversable[Any]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "tabulous\/Row.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Any) ⇒ Boolean): Traversable[Any]", "member" : "scala.collection.TraversableLike.filter", "link" : "tabulous\/Row.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Any) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Traversable[Any], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "tabulous\/Row.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Any) ⇒ B)(bf: CanBuildFrom[Traversable[Any], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "tabulous\/Row.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Traversable[Any], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "tabulous\/Row.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Traversable[Any], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "tabulous\/Row.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Traversable[Any], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "tabulous\/Row.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "tabulous\/Row.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isEmpty", "link" : "tabulous\/Row.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[Any, ParIterable[Any]]", "member" : "scala.collection.TraversableLike.parCombiner", "link" : "tabulous\/Row.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParIterable[A]]", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Traversable[Any]): Traversable[Any]", "member" : "scala.collection.TraversableLike.toCollection", "link" : "tabulous\/Row.html#toCollection(repr:Repr):Traversable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Traversable[Any]", "member" : "scala.collection.TraversableLike.thisCollection", "link" : "tabulous\/Row.html#thisCollection:Traversable[A]", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "tabulous\/Row.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Traversable[Any]", "member" : "scala.collection.TraversableLike.repr", "link" : "tabulous\/Row.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "tabulous\/Row.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParIterable[Any]", "member" : "scala.collection.Parallelizable.par", "link" : "tabulous\/Row.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "tabulous\/Row.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "tabulous\/Row.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "tabulous\/Row.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "tabulous\/Row.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "tabulous\/Row.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "tabulous\/Row.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Any, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "tabulous\/Row.html#toMap[T,U](implicitev:<:<[A,(T,U)]):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Any]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "tabulous\/Row.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "tabulous\/Row.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "tabulous\/Row.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Any]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "tabulous\/Row.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Any]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "tabulous\/Row.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Any]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "tabulous\/Row.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Any]", "member" : "scala.collection.TraversableOnce.toList", "link" : "tabulous\/Row.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "tabulous\/Row.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "tabulous\/Row.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "tabulous\/Row.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "tabulous\/Row.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Any) ⇒ B)(cmp: Ordering[B]): Any", "member" : "scala.collection.TraversableOnce.minBy", "link" : "tabulous\/Row.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Any) ⇒ B)(cmp: Ordering[B]): Any", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "tabulous\/Row.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Any", "member" : "scala.collection.TraversableOnce.max", "link" : "tabulous\/Row.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Any", "member" : "scala.collection.TraversableOnce.min", "link" : "tabulous\/Row.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "tabulous\/Row.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "tabulous\/Row.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Any) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "tabulous\/Row.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "tabulous\/Row.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "tabulous\/Row.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "tabulous\/Row.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Any, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "tabulous\/Row.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Any) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "tabulous\/Row.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Any, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "tabulous\/Row.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Any) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "tabulous\/Row.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Any, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "tabulous\/Row.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Any) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "tabulous\/Row.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Any, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "tabulous\/Row.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Any) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "tabulous\/Row.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Any, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "tabulous\/Row.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Any) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "tabulous\/Row.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "tabulous\/Row.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "tabulous\/Row.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Any]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "tabulous\/Row.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "tabulous\/Row.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tabulous\/Row.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tabulous\/Row.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tabulous\/Row.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tabulous\/Row.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tabulous\/Row.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tabulous\/Row.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tabulous\/Row.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/Row.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/Row.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/Row.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tabulous\/Row.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tabulous\/Row.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tabulous\/Row.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "tabulous\/Row.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tabulous\/Row.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "tabulous\/Row.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tabulous\/Row.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tabulous\/Row.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "columns", "tail" : "(): Array[String]", "member" : "tabulous.Row.columns", "link" : "tabulous\/Row.html#columns:Array[String]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(columnIndex: Int): Any", "member" : "tabulous.Row.apply", "link" : "tabulous\/Row.html#apply(columnIndex:Int):Any", "kind" : "abstract def"}], "shortDescription" : "Represents an immutable row in a Table.", "trait" : "tabulous\/Row.html", "kind" : "trait"}, {"name" : "tabulous.Table", "members_trait" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "tabulous\/Table.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "toString", "tail" : "(): String", "member" : "tabulous.Table.toString", "link" : "tabulous\/Table.html#toString():String", "kind" : "def"}, {"label" : "toString", "tail" : "(colWidth: Int): String", "member" : "tabulous.Table.toString", "link" : "tabulous\/Table.html#toString(colWidth:Int):String", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Row) ⇒ U): Unit", "member" : "tabulous.Table.foreach", "link" : "tabulous\/Table.html#foreach[U](f:tabulous.Row=>U):Unit", "kind" : "def"}, {"label" : "compile", "tail" : "(): Table", "member" : "tabulous.Table.compile", "link" : "tabulous\/Table.html#compile:tabulous.Table", "kind" : "def"}, {"label" : "transform", "tail" : "(transformations: Map[String, (Any) ⇒ Any]): Table", "member" : "tabulous.Table.transform", "link" : "tabulous\/Table.html#transform(transformations:Map[String,Any=>Any]):tabulous.Table", "kind" : "def"}, {"label" : "transformi", "tail" : "(transformations: Map[Int, (Any) ⇒ Any]): Table", "member" : "tabulous.Table.transformi", "link" : "tabulous\/Table.html#transformi(transformations:Map[Int,Any=>Any]):tabulous.Table", "kind" : "def"}, {"label" : "where", "tail" : "(p: (Row) ⇒ Boolean): Table", "member" : "tabulous.Table.where", "link" : "tabulous\/Table.html#where(p:tabulous.Row=>Boolean):tabulous.Table", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Row) ⇒ Boolean): Table", "member" : "tabulous.Table.filter", "link" : "tabulous\/Table.html#filter(p:tabulous.Row=>Boolean):tabulous.Table", "kind" : "def"}, {"label" : "selecti", "tail" : "(columnIndices: Int*): Table", "member" : "tabulous.Table.selecti", "link" : "tabulous\/Table.html#selecti(columnIndices:Int*):tabulous.Table", "kind" : "def"}, {"label" : "select", "tail" : "(columnNames: String*): Table", "member" : "tabulous.Table.select", "link" : "tabulous\/Table.html#select(columnNames:String*):tabulous.Table", "kind" : "def"}, {"label" : "apply", "tail" : "(rowIndex: Int, columnIndex: Int): Any", "member" : "tabulous.Table.apply", "link" : "tabulous\/Table.html#apply(rowIndex:Int,columnIndex:Int):Any", "kind" : "def"}, {"label" : "numColumns", "tail" : "(): Int", "member" : "tabulous.Table.numColumns", "link" : "tabulous\/Table.html#numColumns:Int", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "tabulous.Table.size", "link" : "tabulous\/Table.html#size:Int", "kind" : "def"}, {"label" : "seq", "tail" : "(): Traversable[Row]", "member" : "scala.collection.Traversable.seq", "link" : "tabulous\/Table.html#seq:Traversable[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Traversable]", "member" : "scala.collection.Traversable.companion", "link" : "tabulous\/Table.html#companion:scala.collection.generic.GenericCompanion[Traversable]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Row) ⇒ GenTraversableOnce[B]): Traversable[Traversable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "tabulous\/Table.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Row) ⇒ GenTraversableOnce[B]): Traversable[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "tabulous\/Table.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Row) ⇒ (A1, A2, A3)): (Traversable[A1], Traversable[A2], Traversable[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "tabulous\/Table.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Row) ⇒ (A1, A2)): (Traversable[A1], Traversable[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "tabulous\/Table.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Traversable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "tabulous\/Table.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[Row, Traversable[Row]]", "member" : "scala.collection.generic.GenericTraversableTemplate.newBuilder", "link" : "tabulous\/Table.html#newBuilder:scala.collection.mutable.Builder[A,CC[A]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Row) ⇒ Boolean): FilterMonadic[Row, Traversable[Row]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "tabulous\/Table.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): TraversableView[Row, Traversable[Row]]", "member" : "scala.collection.TraversableLike.view", "link" : "tabulous\/Table.html#view(from:Int,until:Int):scala.collection.TraversableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): TraversableView[Row, Traversable[Row]]", "member" : "scala.collection.TraversableLike.view", "link" : "tabulous\/Table.html#view:scala.collection.TraversableView[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "tabulous\/Table.html#stringPrefix:String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Row, Col[Row]]): Col[Row]", "member" : "scala.collection.TraversableLike.to", "link" : "tabulous\/Table.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Row]", "member" : "scala.collection.TraversableLike.toStream", "link" : "tabulous\/Table.html#toStream:Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Row]", "member" : "scala.collection.TraversableLike.toIterator", "link" : "tabulous\/Table.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Row]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "tabulous\/Table.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.TraversableLike.copyToArray", "link" : "tabulous\/Table.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Traversable[Row]]", "member" : "scala.collection.TraversableLike.inits", "link" : "tabulous\/Table.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Traversable[Row]]", "member" : "scala.collection.TraversableLike.tails", "link" : "tabulous\/Table.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Traversable[Row], Traversable[Row])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "tabulous\/Table.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Row) ⇒ Boolean): (Traversable[Row], Traversable[Row])", "member" : "scala.collection.TraversableLike.span", "link" : "tabulous\/Table.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Row) ⇒ Boolean): Traversable[Row]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "tabulous\/Table.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Row) ⇒ Boolean): Traversable[Row]", "member" : "scala.collection.TraversableLike.takeWhile", "link" : "tabulous\/Table.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Traversable[Row]", "member" : "scala.collection.TraversableLike.slice", "link" : "tabulous\/Table.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Traversable[Row]", "member" : "scala.collection.TraversableLike.drop", "link" : "tabulous\/Table.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Traversable[Row]", "member" : "scala.collection.TraversableLike.take", "link" : "tabulous\/Table.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Traversable[Row]", "member" : "scala.collection.TraversableLike.init", "link" : "tabulous\/Table.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Row]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "tabulous\/Table.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Row", "member" : "scala.collection.TraversableLike.last", "link" : "tabulous\/Table.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): Traversable[Row]", "member" : "scala.collection.TraversableLike.tail", "link" : "tabulous\/Table.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Row]", "member" : "scala.collection.TraversableLike.headOption", "link" : "tabulous\/Table.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Row", "member" : "scala.collection.TraversableLike.head", "link" : "tabulous\/Table.html#head:A", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Row, B) ⇒ B)(bf: CanBuildFrom[Traversable[Row], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "tabulous\/Table.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Row) ⇒ B)(bf: CanBuildFrom[Traversable[Row], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "tabulous\/Table.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Traversable[Row], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "tabulous\/Table.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Row) ⇒ Boolean): Option[Row]", "member" : "scala.collection.TraversableLike.find", "link" : "tabulous\/Table.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Row) ⇒ Boolean): Boolean", "member" : "scala.collection.TraversableLike.exists", "link" : "tabulous\/Table.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Row) ⇒ Boolean): Boolean", "member" : "scala.collection.TraversableLike.forall", "link" : "tabulous\/Table.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Row) ⇒ K): Map[K, Traversable[Row]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "tabulous\/Table.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Row) ⇒ Boolean): (Traversable[Row], Traversable[Row])", "member" : "scala.collection.TraversableLike.partition", "link" : "tabulous\/Table.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Row, B])(bf: CanBuildFrom[Traversable[Row], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "tabulous\/Table.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Row) ⇒ Boolean): Traversable[Row]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "tabulous\/Table.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Row) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Traversable[Row], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "tabulous\/Table.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Row) ⇒ B)(bf: CanBuildFrom[Traversable[Row], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "tabulous\/Table.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Traversable[Row], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "tabulous\/Table.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Traversable[Row], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "tabulous\/Table.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Traversable[Row], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "tabulous\/Table.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "tabulous\/Table.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isEmpty", "link" : "tabulous\/Table.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[Row, ParIterable[Row]]", "member" : "scala.collection.TraversableLike.parCombiner", "link" : "tabulous\/Table.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParIterable[A]]", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Traversable[Row]): Traversable[Row]", "member" : "scala.collection.TraversableLike.toCollection", "link" : "tabulous\/Table.html#toCollection(repr:Repr):Traversable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Traversable[Row]", "member" : "scala.collection.TraversableLike.thisCollection", "link" : "tabulous\/Table.html#thisCollection:Traversable[A]", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "tabulous\/Table.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Traversable[Row]", "member" : "scala.collection.TraversableLike.repr", "link" : "tabulous\/Table.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "tabulous\/Table.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParIterable[Row]", "member" : "scala.collection.Parallelizable.par", "link" : "tabulous\/Table.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "tabulous\/Table.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "tabulous\/Table.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "tabulous\/Table.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "tabulous\/Table.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "tabulous\/Table.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "tabulous\/Table.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Row, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "tabulous\/Table.html#toMap[T,U](implicitev:<:<[A,(T,U)]):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Row]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "tabulous\/Table.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "tabulous\/Table.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "tabulous\/Table.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Row]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "tabulous\/Table.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Row]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "tabulous\/Table.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Row]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "tabulous\/Table.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Row]", "member" : "scala.collection.TraversableOnce.toList", "link" : "tabulous\/Table.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "tabulous\/Table.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "tabulous\/Table.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "tabulous\/Table.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "tabulous\/Table.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Row) ⇒ B)(cmp: Ordering[B]): Row", "member" : "scala.collection.TraversableOnce.minBy", "link" : "tabulous\/Table.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Row) ⇒ B)(cmp: Ordering[B]): Row", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "tabulous\/Table.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Row", "member" : "scala.collection.TraversableOnce.max", "link" : "tabulous\/Table.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Row", "member" : "scala.collection.TraversableOnce.min", "link" : "tabulous\/Table.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "tabulous\/Table.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "tabulous\/Table.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Row) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "tabulous\/Table.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "tabulous\/Table.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "tabulous\/Table.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "tabulous\/Table.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Row, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "tabulous\/Table.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Row) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "tabulous\/Table.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Row, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "tabulous\/Table.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Row) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "tabulous\/Table.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Row, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "tabulous\/Table.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Row) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "tabulous\/Table.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Row, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "tabulous\/Table.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Row) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "tabulous\/Table.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Row, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "tabulous\/Table.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Row) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "tabulous\/Table.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "tabulous\/Table.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Row]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "tabulous\/Table.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "tabulous\/Table.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tabulous\/Table.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tabulous\/Table.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tabulous\/Table.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tabulous\/Table.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tabulous\/Table.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tabulous\/Table.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tabulous\/Table.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/Table.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/Table.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/Table.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tabulous\/Table.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tabulous\/Table.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tabulous\/Table.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "tabulous\/Table.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tabulous\/Table.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "tabulous\/Table.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tabulous\/Table.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tabulous\/Table.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(rowIndex: Int): Row", "member" : "tabulous.Table.apply", "link" : "tabulous\/Table.html#apply(rowIndex:Int):tabulous.Row", "kind" : "abstract def"}, {"label" : "numRows", "tail" : "(): Int", "member" : "tabulous.Table.numRows", "link" : "tabulous\/Table.html#numRows:Int", "kind" : "abstract def"}, {"label" : "columns", "tail" : "(): Array[String]", "member" : "tabulous.Table.columns", "link" : "tabulous\/Table.html#columns:Array[String]", "kind" : "abstract def"}], "shortDescription" : "Abstract representation of an immutable Table.", "object" : "tabulous\/Table$.html", "members_object" : [{"label" : "copy", "tail" : "(table: Table): Table", "member" : "tabulous.Table.copy", "link" : "tabulous\/Table$.html#copy(table:tabulous.Table):tabulous.Table", "kind" : "def"}, {"label" : "fromData", "tail" : "(columns: Seq[String], data: Seq[Seq[Any]]): Table", "member" : "tabulous.Table.fromData", "link" : "tabulous\/Table$.html#fromData(columns:Seq[String],data:Seq[Seq[Any]]):tabulous.Table", "kind" : "def"}, {"label" : "fromFlatData", "tail" : "(columns: Seq[String], data: Seq[Any]): Table", "member" : "tabulous.Table.fromFlatData", "link" : "tabulous\/Table$.html#fromFlatData(columns:Seq[String],data:Seq[Any]):tabulous.Table", "kind" : "def"}, {"label" : "fromURL", "tail" : "(url: URL): Table", "member" : "tabulous.Table.fromURL", "link" : "tabulous\/Table$.html#fromURL(url:java.net.URL):tabulous.Table", "kind" : "def"}, {"label" : "fromFile", "tail" : "(file: File): Table", "member" : "tabulous.Table.fromFile", "link" : "tabulous\/Table$.html#fromFile(file:java.io.File):tabulous.Table", "kind" : "def"}, {"label" : "fromFile", "tail" : "(fileName: String): Table", "member" : "tabulous.Table.fromFile", "link" : "tabulous\/Table$.html#fromFile(fileName:String):tabulous.Table", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tabulous\/Table$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tabulous\/Table$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tabulous\/Table$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tabulous\/Table$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tabulous\/Table$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tabulous\/Table$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tabulous\/Table$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/Table$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/Table$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tabulous\/Table$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tabulous\/Table$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tabulous\/Table$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tabulous\/Table$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tabulous\/Table$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "tabulous\/Table$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tabulous\/Table$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "tabulous\/Table$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tabulous\/Table$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tabulous\/Table$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tabulous\/Table.html", "kind" : "trait"}]};